name: CI

on:
  push:
    branches: [ main, "**" ]  # Run on all branches
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        cache: true

    - name: Install dependencies
      run: go mod download
      
    - name: Install FFmpeg with debug support
      if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
      run: |
        sudo apt-get update -y
        sudo apt-get install -y build-essential yasm libx264-dev libx265-dev
        
        # Clone FFmpeg from source
        git clone --depth 1 https://git.ffmpeg.org/ffmpeg.git ffmpeg_source
        cd ffmpeg_source
        
        # Configure with debug and x265 support
        ./configure --enable-debug=3 --disable-stripping --enable-libx264 --enable-libx265 --enable-gpl
        
        # Build and install
        make -j$(nproc)
        sudo make install
        sudo ldconfig
        
        # Verify installation
        ffmpeg -version

    - name: Run unit tests with coverage
      env:
        TEST_SKIP_QP_ANALYZER: ${{ github.ref != 'refs/heads/main' && github.event_name != 'pull_request' }}
      run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

    - name: Upload coverage to Codecov
      if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.txt
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        cache: true

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

  dependency-check:
    name: Dependency Scanning
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        cache: true

    - name: Check vulnerable dependencies with Govulncheck
      uses: golang/govulncheck-action@v1
      with:
        go-version-input: '1.21'
        check-latest: true

    - name: Generate dependency graph with deps.dev
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install deps.dev tool
      run: npm install -g @depsdev/scanner

    - name: Scan dependencies
      run: depsdev-scanner scan go-mod --input go.mod --output deps-report.json

    - name: Upload dependency report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-report
        path: deps-report.json 